//-------------------------------------------------------- Переменные и константы. -------------------------------------------------
/*
string name = "Tom"; // определяем переменную и инициализируем её
Console.WriteLine(name); // выводит Tom

name = "Bob"; // меняем значение переменной
Console.WriteLine(name); // выводит Bob
*/

/*
const string NAME = "Tom"; // определяем константу
// const string NAME; // ! ошибка, константа NAME не инициализирована 
// NAME = "Bob"; // ! ошибка, у константы нельзя изменить значение
Console.WriteLine(NAME);
*/
//---------------------------------------------------------------- Литералы. ---------------------------------------------------------------
//Есть две логических константы - true (истина) и false (ложь):
// Console.WriteLine(true); // истина
// Console.WriteLine(false); // ложь

// // С целыми числами в десятичной форме все должно быть понятно, так как они используются в повседневной жизни:
// Console.WriteLine(-11);
// Console.WriteLine(5);
// Console.WriteLine(505);

// Числа в двоичной форме предваряются символами 0b, после которых идет набор из нулей и единиц:
// Console.WriteLine(0b11);  // 3
// Console.WriteLine(0b1011);  // 11
// Console.WriteLine(0b100001);  // 33

// Вещественные литералы представляют дробные числа. Вещественные числа с фиксированной запятой, при которой дробную часть отделяется от целой части точкой.
// Console.WriteLine(3.14); // 3,14
// Console.WriteLine(100.001); // 100,001
// Console.WriteLine(-0.38); // -0,38

// Символьные литералы представляют одиночные символы. Символы заключаются в одинарные кавычки.
// Console.WriteLine('2'); // 2
// Console.WriteLine('A'); // А
// Console.WriteLine('T'); // Т

// Еще один способ определения символов представляет использования шестнадцатеричных кодов ASCII. 
// Для этого в одинарных кавычках указываются символы '\x', после которых идет шестнадцатеричный код символа из таблицы ASCII.
// Console.WriteLine('\x78'); // x    
// Console.WriteLine('\x5A'); // z

// И последний способ определения символьных литералов представляет применение кодов из таблицы символов Unicode. 
// Для этого в одинарных кавычках указываются символы '\u', после которых идет шестнадцатеричный код Unicode. Например, код '\u0411' представляет кириллический символ 'Б':
// Console.WriteLine('\u0411'); // Б
// Console.WriteLine('\u0420'); // P
// Console.WriteLine('\u0421'); // C

// Строковые литералы представляют строки. Строки заключаются в двойные кавычки:
// Console.WriteLine("hello"); // hello
// Console.WriteLine("фыва"); // фыва
// Console.WriteLine("hello word"); // hello word

// Если внутри строки необходимо вывести двойную кавычку, то такая внутренняя кавычка предваряется обратным слешем:
// Console.WriteLine("Компания \"Рога и копыта\""); // Компания "Рога и копыта"

// Также в строках можно использовать управляющие последовательности. Например, последовательность '\n' осуществляет перевод на новую строку:
Console.WriteLine("Привет \nмир"); // Привет
                                   // мир

//---------------------------------------------------------- Типы данных -----------------------------------------------------------                                   